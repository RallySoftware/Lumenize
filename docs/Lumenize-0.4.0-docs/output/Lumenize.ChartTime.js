Ext.data.JsonP.Lumenize_ChartTime({"tagname":"class","name":"Lumenize.ChartTime","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Lumenize.ChartTime","members":{"cfg":[],"property":[],"method":[{"name":"constructor","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-constructor"},{"name":"$eq","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-S-eq"},{"name":"$gt","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-S-gt"},{"name":"$gte","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-S-gte"},{"name":"$lt","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-S-lt"},{"name":"$lte","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-S-lte"},{"name":"add","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-add"},{"name":"addInPlace","tagname":"method","owner":"Lumenize.ChartTime","meta":{"chainable":true},"id":"method-addInPlace"},{"name":"daysInMonth","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-daysInMonth"},{"name":"decrement","tagname":"method","owner":"Lumenize.ChartTime","meta":{"chainable":true},"id":"method-decrement"},{"name":"dowNumber","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-dowNumber"},{"name":"dowString","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-dowString"},{"name":"getJSDate","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-getJSDate"},{"name":"getJSDateInTZfromGMT","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-getJSDateInTZfromGMT"},{"name":"getSegmentsAsObject","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-getSegmentsAsObject"},{"name":"getShiftedISOString","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-getShiftedISOString"},{"name":"granularityAboveDay","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-granularityAboveDay"},{"name":"inGranularity","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-inGranularity"},{"name":"increment","tagname":"method","owner":"Lumenize.ChartTime","meta":{"chainable":true},"id":"method-increment"},{"name":"is53WeekYear","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-is53WeekYear"},{"name":"isLeapYear","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-isLeapYear"},{"name":"rataDieNumber","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-rataDieNumber"},{"name":"toString","tagname":"method","owner":"Lumenize.ChartTime","meta":{},"id":"method-toString"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":7,"files":[{"filename":"ChartTime.coffee.js","href":"ChartTime.coffee.html#Lumenize-ChartTime"}],"html_meta":{},"statics":{"cfg":[],"property":[{"name":"granularitySpecs","tagname":"property","owner":"Lumenize.ChartTime","meta":{"static":true},"id":"static-property-granularitySpecs"}],"method":[{"name":"addGranularity","tagname":"method","owner":"Lumenize.ChartTime","meta":{"static":true},"id":"static-method-addGranularity"},{"name":"getZuluString","tagname":"method","owner":"Lumenize.ChartTime","meta":{"static":true},"id":"static-method-getZuluString"}],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ChartTime.coffee.html#Lumenize-ChartTime' target='_blank'>ChartTime.coffee.js</a></div></pre><div class='doc-contents'><h1>ChartTime</h1>\n\n<p><em>Time axis creation/manipulation for charts</em></p>\n\n<h2>Features</h2>\n\n<ul>\n<li>Generate the values for time series chart axis</li>\n<li>Allows for custom granularities like release/iteration/iteration_day</li>\n<li>Knockout weekends and holidays (ChartTimeIterator)</li>\n<li>Knockout non-work hours (ChartTimeIterator)</li>\n<li>Drill up and down granularity</li>\n<li>Work with precision around timezone differences</li>\n<li>Month is 1-indexed instead of 0-indexed like Javascript's Date object</li>\n<li>Date/Time math (add 3 months, subtract 2 weeks, etc.)</li>\n<li>Tested</li>\n<li>Documented</li>\n</ul>\n\n\n<h2>Granularity</h2>\n\n<p>Each ChartTime object has a granularity. This means that you never have to\nworry about any bits lower than your specified granularity. A day has only\nyear, month, and day segments. You are never tempted to specify 11:59pm\nto specify the end of a day-long timebox.</p>\n\n<p>ChartTime supports the following granularities:</p>\n\n<ul>\n<li><code>year</code>\n\n<ul>\n<li><code>month</code>\n\n<ul>\n<li><code>day</code>\n\n<ul>\n<li><code>hour</code>\n\n<ul>\n<li><code>minute</code>\n\n<ul>\n<li><code>second</code>\n\n<ul>\n<li><code>millisecond</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>quarter</code> (but not quarter_month, day, etc.)</li>\n<li><code>week</code> (ISO-8601 style week numbering)\n\n<ul>\n<li><code>week_day</code> (Monday = 1, Sunday = 7)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<p>Also, you can define your own custom hierarchical granularities, for example...</p>\n\n<ul>\n<li><code>release</code>\n\n<ul>\n<li><code>iteration</code>\n\n<ul>\n<li><code>iteration_day</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>Timezone precision</h2>\n\n<p>It's very hard to do filtering and grouping of time-series data with timezone precision.</p>\n\n<p>For instance, 11pm in California on December 25 (Christmas holiday) is 2am December 26 (not a holiday)\nin New York. This also happens to be 7am December 26 GMT. If you have an event that occurs at\n2011-12-26T07:00:00.000Z, then you need to decide what timezone to use as your context before you\ndecide if that event occured on Christmas day or not. It's not just holidays where this can burn you.\nDeciding if a piece of work finished in one iteration versus another can make a difference for\nyou iteration metrics. The iteration metrics for a distributed team should look the same regardless\nof whether those metrics were generated in New York versus Los Angeles... versus Bangalore.</p>\n\n<p>The javascript Date object lets you work in either the local time or Zulu (GMT/UTC) time but it doesn't let you\ncontrol the timezone. Do you know the correct way to apply the timezone shift to a JavaScript Date Object?\nDo you know when Daylight Savings Time kicks in and New York is 4 hours shifted from GMT instead of 5? Will\nyou remember to do it perfectly every time it's needed in your code?</p>\n\n<p>If you need this precision, ChartTime helps by clearly delineating the moment when you need to do\ntimezone manipulation... the moment you need to compare two or more dates. You can do all of your\nholiday/weekend knockout manipulation without regard to timezone and only consider the timezone\nupon comparison.</p>\n\n<h2>Month is 1-indexed as you would expect</h2>\n\n<p>Javascript's date object uses 0 for January and 11 for December. ChartTime uses 1 for January and 12 for December...\nwhich is what ISO-8601 uses and what humans expect. Everyone who works with the javascript Date Object at one\npoint or another gets burned by this.</p>\n\n<h2>Week support</h2>\n\n<p>ChartTime follows ISO-8601 where ever it makes sense. Implications of using this ISO format (paraphrased info from wikipedia):</p>\n\n<ul>\n<li>All weeks have 7 days (i.e. there are no fractional weeks).</li>\n<li>Any given day falls into a single week which means that incrementing across the year boundary in week\ngranularity is without gaps or repeats.</li>\n<li>Weeks are contained within a single year. (i.e. weeks are never spit over two years).</li>\n<li>The above two implications also mean that we have to warp the boundaries of the year to accomplish this. In week\ngranularity dates may appear in a different year than you would expect and some years have 53 weeks.</li>\n<li>The date directly tells the weekday.</li>\n<li>All years start with a Monday and end with a Sunday.</li>\n<li>Dates represented as yyyyWww-d can be sorted as strings.</li>\n</ul>\n\n\n<p><strong>In general, it just greatly simplifies the use of week granularity in a chart situation.</strong></p>\n\n<p>The only real downside to this approach is that USA folks expect the week to start on Sunday. However, the ISO-8601 spec starts\neach week on Monday. Following ISO-8601, ChartTime uses 1 for Monday and 7 for Sunday which aligns with\nthe US standard for every day except Sunday. The US standard is to use 0 for Sunday.</p>\n\n<h2>Basic usage</h2>\n\n<pre><code>{ChartTimeIterator, ChartTimeRange, ChartTime} = require('../')\n</code></pre>\n\n<p>Get ChartTime objects relative to now.</p>\n\n<pre><code>d = new ChartTime('this millisecond in Pacific/Fiji')\nd = new ChartTime('prior week')\nd = new ChartTime('next month')\n</code></pre>\n\n<p>Spell it all out with a JavaScript object</p>\n\n<pre><code>d1 = new ChartTime({granularity: 'day', year: 2011, month: 2, day: 28})\nconsole.log(d1.toString())\n# 2011-02-28\n</code></pre>\n\n<p>You can use the string short-hand rather than spell out the segments separately. The granularity\nis automatically inferred from how many segments you provide.</p>\n\n<pre><code>d2 = new ChartTime('2011-03-01')\nconsole.log(d2.toString())\n# 2011-03-01\n</code></pre>\n\n<p>Increment/decrement and compare ChartTimes without regard to timezone</p>\n\n<pre><code>console.log(d1.$gte(d2)) \nd1.increment()\nconsole.log(d1.$eq(d2))\n# false\n# true\n</code></pre>\n\n<p>Do math on them.</p>\n\n<pre><code>d3 = d1.add(5)\nconsole.log(d3.toString())\n# 2011-03-06\n</code></pre>\n\n<p>Get the day of the week.</p>\n\n<pre><code>console.log(d3.dowString())\n# Sunday\n</code></pre>\n\n<p>Subtraction is just addition with negative numbers.</p>\n\n<pre><code>d3.addInPlace(-6)\nconsole.log(d3.toString())\n# 2011-02-28\n</code></pre>\n\n<p>If you start on the last day of a month, adding a month takes you to the last day of the next month,\neven if the number of days are different.</p>\n\n<pre><code>d3.addInPlace(1, 'month')  \nconsole.log(d3.toString())\n# 2011-03-31\n</code></pre>\n\n<p>Deals well with year-granularity math and leap year complexity.</p>\n\n<pre><code>d4 = new ChartTime('2004-02-29')  # leap day\nd4.addInPlace(1, 'year')  # adding a year takes us to a non-leap year\nconsole.log(d4.toString())\n# 2005-02-28\n</code></pre>\n\n<p>Week granularity correctly wraps and deals with 53-week years.</p>\n\n<pre><code>w1 = new ChartTime('2004W53-6')\nconsole.log(w1.inGranularity('day').toString())\n# 2005-01-01\n</code></pre>\n\n<p>Convert between any of the standard granularities. Also converts custom granularities (not shown) to\nstandard granularities if you provide a <code>rataDieNumber()</code> function with your custom granularities.</p>\n\n<pre><code>d5 = new ChartTime('2005-01-01')  # goes the other direction also\nconsole.log(d5.inGranularity('week_day').toString())\n# 2004W53-6\n\nq1 = new ChartTime('2011Q3')\nconsole.log(q1.inGranularity('millisecond').toString())\n# 2011-07-01T00:00:00.000\n</code></pre>\n\n<h2>Timezones</h2>\n\n<p>ChartTime does timezone sensitive conversions. You must set the path to the tz files before doing any timezone sensitive comparisons.\nNote, if you are using one of the pre-packaged Lumenize.js or Lumenize-min.js, then you can supply any string in this call. It will\nignore what you provide and load the time zone data from the files included in the package. We would like to remove the requirement\nfor this initialization when running one of these packages, but for now, you still need the dummy call.</p>\n\n<pre><code>console.log(new ChartTime('2011-01-01').getJSDate('America/Denver').toUTCString())\n# Sat, 01 Jan 2011 07:00:00 GMT\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Properties</h3><div id='static-property-granularitySpecs' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-static-property-granularitySpecs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-static-property-granularitySpecs' class='name expandable'>granularitySpecs</a><span> : Object</span><strong class='static signature' >static</strong></div><div class='description'><div class='short'>granularitySpecs is a static object that is used to tell ChartTime what to do with particular granularties. ...</div><div class='long'><p><code>granularitySpecs</code> is a static object that is used to tell ChartTime what to do with particular granularties. You can think of\neach entry in it as a sort of sub-class of ChartTime. In that sense ChartTime is really a factory generating ChartTime objects\nof type granularity. When custom timebox granularities are added to ChartTime by <code>ChartTime.addGranularity()</code>, it adds to this\n<code>granularitySpecs</code> object.</p>\n\n<p>Each entry in <code>granularitySpecs</code> has the following:</p>\n\n<ul>\n<li>segments - an Array identifying the ancestry (e.g. for 'day', it is: <code>['year', 'month', 'day']</code>)</li>\n<li>mask - a String used to identify when this granularity is passed in and to serialize it on the way out.</li>\n<li>lowest - the lowest possible value for this granularity. 0 for millisecond but 1 for day.</li>\n<li>pastHighest - a callback function that will say when to rollover the next coarser granularity.</li>\n</ul>\n\n</div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Lumenize.ChartTime-method-constructor' class='name expandable'>Lumenize.ChartTime</a>( <span class='pre'>spec_RDN_Date_Or_String, [granularity], [tz]</span> ) : <a href=\"#!/api/Lumenize.ChartTime\" rel=\"Lumenize.ChartTime\" class=\"docClass\">Lumenize.ChartTime</a></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>spec_RDN_Date_Or_String</span> : Object/Number/Date/String<div class='sub-desc'>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li><li><span class='pre'>tz</span> : String (optional)<div class='sub-desc'><p>The constructor for ChartTime supports the passing in of a String, a rata die number (RDN), or a spec Object</p>\n\n<h2>String</h2>\n\n<p>There are two kinds of strings that can be passed into the constructor:</p>\n\n<ol>\n<li>Human strings relative to now (e.g. \"this day\", \"prior month\", \"next quarter\", \"this millisecond in Pacific/Fiji\", etc.)</li>\n<li>ISO-8601 or custom masked (e.g. \"I03D10\" - 10th day of 3rd iteration)</li>\n</ol>\n\n\n<h2>Human strings relative to now</h2>\n\n<p>The string must be in the form <code>(this, prior, next) |granularity| [in |timezone|]</code></p>\n\n<p>Examples</p>\n\n<ul>\n<li><code>this day</code> today</li>\n<li><code>next month</code> next month</li>\n<li><code>this day in Pacific/Fiji</code> the day that it currently is in Fiji</li>\n<li><code>prior hour in America/New_York</code> the hour before the current hour in New York</li>\n<li><code>next quarter</code> next quarter</li>\n<li><code>prior week</code> last week</li>\n</ul>\n\n\n<h2>ISO-8601 or custom masked</h2>\n\n<p>When you pass in an ISO-8601 or custom mask string, ChartTime uses the masks that are defined for each granularity to figure out the granularity...\nunless you explicitly provide a granularity. This parser does not work on all valid ISO-8601 forms. Ordinal dates (<code>\"2012-288\"</code>)\nare not supported but week number form (<code>\"2009W52-7\"</code>) is supported. The canonical form (<code>\"2009-01-01T12:34:56.789\"</code>) will\nwork as will any shortened subset of it (<code>\"2009-01-01\"</code>, <code>\"2009-01-01T12:34\"</code>, etc.). We've added a form for Quarter\ngranularity (<code>\"2009Q4\"</code>). Plus it will even parse strings in whatever custom granularity you provide based\nupon the mask that you provide for that granularity.</p>\n\n<p>If the granularity is specified but not all of the segments are provided, ChartTime will fill in the missing value\nwith the <code>lowest</code> value from granularitySpecs.</p>\n\n<p>The Lumenize hierarchy tools rely upon the property that a single character is used between segments so the ISO forms that\nomit the delimiters are not supported.</p>\n\n<p>If the string has a timezone indicator on the end (<code>...+05:00</code> or <code>...Z</code>), ChartTime will ignore it. Timezone information\nis intended to only be used for comparison (see examples for timezone comparison).</p>\n\n<p>There are two special Strings that are recognized: <code>BEFORE_FIRST</code> and <code>PAST_LAST</code>. You must provide a granularity if you\nare instantiating a ChartTime with these values. They are primarily used for custom granularities where your users\nmay mistakenly request charts for iterations and releases that have not yet been defined. They are particularly useful when\nyou want to iterate to the last defined iteration/release.</p>\n\n<h2>Rata Die Number</h2>\n\n<p>The <strong>rata die number (RDN)</strong> for a date is the number of days since 0001-01-01. You will probably never work\ndirectly with this number but it's what ChartTime uses to convert between granularities. When you are instantiating\na ChartTime from an RDN, you must provide a granularity. Using RDN will work even for the granularities finer than day.\nChartTime will populate the finer grained segments (hour, minute, etc.) with the approriate <code>lowest</code> value.</p>\n\n<h2>Date</h2>\n\n<p>You can also pass in a JavaScript Date() Object. The passing in of a tz with this option doesn't make sense. You'll end\nup with the same ChartTime value no matter what because the JS Date() already sorta has a timezone. I'm not sure if this\noption is even really useful. In most cases, you are probably better off using ChartTime.getZuluString()</p>\n\n<h2>Spec</h2>\n\n<p>You can also explicitly spell out the segments in a <strong>spec</strong> Object in the form of\n<code>{granularity: 'day', year: 2009, month: 1, day: 1}</code>. If the granularity is specified but not all of the segments are\nprovided, ChartTime will fill in the missing value with the appropriate <code>lowest</code> value from granularitySpecs.</p>\n\n<h2>granularity</h2>\n\n<p>If you provide a granularity it will take precedence over whatever fields you've provided in your spec or whatever segments\nyou have provided in your string. ChartTime will leave off extra values and fill in missing ones with the appropriate <code>lowest</code>\nvalue.</p>\n\n<h2>tz</h2>\n\n<p>Most of the time, ChartTime assumes that any dates you pass in are timezone less. You'll specify Christmas as 12-25, then you'll\nshift the boundaries of Christmas for a specific timezone for boundary comparison.</p>\n\n<p>However, if you provide a tz parameter to this constructor, ChartTime will assume you are passing in a true GMT date/time and shift into\nthe provided timezone. So...</p>\n\n<pre><code>d = new ChartTime('2011-01-01T02:00:00:00.000Z', 'day', 'America/New_York')\nconsole.log(d.toString())\n# 2010-12-31\n</code></pre>\n\n<p>Rule of thumb on when you want to use timezones:</p>\n\n<ol>\n<li>If you have true GMT date/times and you want to create a ChartTime, provide the timezone to this constructor.</li>\n<li>If you have abstract days like Christmas or June 10th and you want to delay the timezone consideration, don't provide a timezone to this constructor.</li>\n<li>In either case, if the dates you want to compare to are in GMT, but you've got ChartTimes or ChartTimeRanges, you'll have to provide a timezone on\nthe way back out of ChartTime/ChartTimeRange</li>\n</ol>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Lumenize.ChartTime\" rel=\"Lumenize.ChartTime\" class=\"docClass\">Lumenize.ChartTime</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-S-eq' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-S-eq' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-S-eq' class='name expandable'>$eq</a>( <span class='pre'>other</span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : ChartTime<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this equals other. Throws an error if the granularities don't match.</p>\n\n<pre><code>d3 = new ChartTime({granularity: 'day', year: 2011, month: 12, day: 31})\nd4 = new ChartTime('2012-01-01').add(-1)\nconsole.log(d3.$eq(d4))\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-S-gt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-S-gt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-S-gt' class='name expandable'>$gt</a>( <span class='pre'>other</span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : ChartTime<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is greater than other. Throws an error if the granularities don't match</p>\n\n<pre><code>d1 = new ChartTime({granularity: 'day', year: 2011, month: 2, day: 28})\nd2 = new ChartTime({granularity: 'day', year: 2011, month: 3, day: 1})\nconsole.log(d1.$gt(d2))\n# false\nconsole.log(d2.$gt(d1))\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-S-gte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-S-gte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-S-gte' class='name expandable'>$gte</a>( <span class='pre'>other</span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : ChartTime<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is greater than or equal to other</p>\n</div></li></ul></div></div></div><div id='method-S-lt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-S-lt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-S-lt' class='name expandable'>$lt</a>( <span class='pre'>other</span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : ChartTime<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is less than other</p>\n</div></li></ul></div></div></div><div id='method-S-lte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-S-lte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-S-lte' class='name expandable'>$lte</a>( <span class='pre'>other</span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : ChartTime<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is less than or equal to other</p>\n</div></li></ul></div></div></div><div id='method-add' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-add' class='name expandable'>add</a>( <span class='pre'>qty, [granularity]</span> ) : ChartTime</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>qty</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>ChartTime</span><div class='sub-desc'><p>Adds (or subtracts) quantity (negative quantity) and returns a new ChartTime. Not efficient for large qty.</p>\n</div></li></ul></div></div></div><div id='method-addInPlace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-addInPlace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-addInPlace' class='name expandable'>addInPlace</a>( <span class='pre'>qty, [granularity]</span> ) : ChartTime<strong class='chainable signature' >chainable</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>qty</span> : Number<div class='sub-desc'><p>Can be negative for subtraction</p>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>ChartTime</span><div class='sub-desc'><p>Adds qty to the ChartTime object. It uses increment and decrement so it's not going to be efficient for large values\nof qty, but it should be fine for charts where we'll increment/decrement small values of qty.</p>\n</div></li></ul></div></div></div><div id='method-daysInMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-daysInMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-daysInMonth' class='name expandable'>daysInMonth</a>( <span class='pre'></span> ) : Number</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the number of days in the current month for this ChartTime</p>\n</div></li></ul></div></div></div><div id='method-decrement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-decrement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-decrement' class='name expandable'>decrement</a>( <span class='pre'>[granularity]</span> ) : ChartTime<strong class='chainable signature' >chainable</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>ChartTime</span><div class='sub-desc'><p>Decrements this by 1 in the granularity of the ChartTime or the granularity specified if it was specified</p>\n</div></li></ul></div></div></div><div id='method-dowNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-dowNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-dowNumber' class='name expandable'>dowNumber</a>( <span class='pre'></span> ) : Number</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the day of the week as a number. Monday = 1, Sunday = 7</p>\n</div></li></ul></div></div></div><div id='method-dowString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-dowString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-dowString' class='name expandable'>dowString</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Returns the day of the week as a String.</p>\n</div></li></ul></div></div></div><div id='method-getJSDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-getJSDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-getJSDate' class='name expandable'>getJSDate</a>( <span class='pre'>tz</span> ) : Date</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Date</span><div class='sub-desc'><p>Returnas a JavaScript Date Object properly shifted. This Date Object can be compared to other Date Objects that you know\nare already in the desired timezone. If you have data that comes from an API in GMT. You can first create a ChartTime object from\nit and then (using this getJSDate() function) you can compare it to JavaScript Date Objects created in local time.</p>\n\n<p>The full name of this function should be getJSDateInGMTasummingThisCTDateIsInTimezone(tz). It converts <strong>TO</strong> GMT\n(actually something that can be compared to GMT). It does <strong>NOT</strong> convert <strong>FROM</strong> GMT. Use getJSDateInTZfromGMT()\nif you want to go in the other direction.</p>\n\n<h2>Usage</h2>\n\n<pre><code>ct = new ChartTime('2011-01-01')\nd = new Date(Date.UTC(2011, 0, 1))\n\nconsole.log(ct.getJSDate('GMT').getTime() == d.getTime())\n# true\n\nconsole.log(ct.inGranularity('hour').add(-5).getJSDate('America/New_York').getTime() == d.getTime())\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getJSDateInTZfromGMT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-getJSDateInTZfromGMT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-getJSDateInTZfromGMT' class='name expandable'>getJSDateInTZfromGMT</a>( <span class='pre'>tz</span> ) : Date</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Date</span><div class='sub-desc'><p>This assumes that the ChartTime is an actual GMT date/time as opposed to some abstract day like Christmas and shifts\nit into the specified timezone.</p>\n\n<p>Note, this function will be off by an hour for the times near midnight on the days where there is a shift to/from daylight\nsavings time. The tz rules engine is designed to go in the other direction so we're mis-using it. This means we are using the wrong\nmoment in rules-space for that hour. The cost of fixing this issue was deemed to high for chart applications.</p>\n</div></li></ul></div></div></div><div id='method-getSegmentsAsObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-getSegmentsAsObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-getSegmentsAsObject' class='name expandable'>getSegmentsAsObject</a>( <span class='pre'></span> ) : Object</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns a simple JavaScript Object containing the segments. This is useful when using utils.match\nfor holiday comparison</p>\n</div></li></ul></div></div></div><div id='method-getShiftedISOString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-getShiftedISOString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-getShiftedISOString' class='name expandable'>getShiftedISOString</a>( <span class='pre'>tz</span> ) : String</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The canonical ISO-8601 date in zulu representation but shifted to the specified tz</p>\n</div></li></ul></div></div></div><div id='method-granularityAboveDay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-granularityAboveDay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-granularityAboveDay' class='name expandable'>granularityAboveDay</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the ChartTime Object's granularity is above (coarser than) \"day\" level</p>\n</div></li></ul></div></div></div><div id='method-inGranularity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-inGranularity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-inGranularity' class='name expandable'>inGranularity</a>( <span class='pre'></span> ) : ChartTime</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>ChartTime</span><div class='sub-desc'><p>Returns a new ChartTime object for the same date-time as this object but in the specified granularity.\nFills in missing finer granularity segments with <code>lowest</code> values. Drops segments when convernting to a coarser\ngranularity.</p>\n</div></li></ul></div></div></div><div id='method-increment' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-increment' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-increment' class='name expandable'>increment</a>( <span class='pre'>[granularity]</span> ) : ChartTime<strong class='chainable signature' >chainable</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>ChartTime</span><div class='sub-desc'><p>Increments this by 1 in the granularity of the ChartTime or the granularity specified if it was specified</p>\n</div></li></ul></div></div></div><div id='method-is53WeekYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-is53WeekYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-is53WeekYear' class='name expandable'>is53WeekYear</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is a 53-week year</p>\n</div></li></ul></div></div></div><div id='method-isLeapYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-isLeapYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-isLeapYear' class='name expandable'>isLeapYear</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is a leap year</p>\n</div></li></ul></div></div></div><div id='method-rataDieNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-rataDieNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-rataDieNumber' class='name expandable'>rataDieNumber</a>( <span class='pre'></span> ) : Number</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the number of days since 0001-01-01. Works for granularities finer than day (hour, minute,\nsecond, millisecond) but ignores the segments of finer granularity than day. Also called common era days.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Uses granularity <code>mask</code> to generate the string representation.</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Methods</h3><div id='static-method-addGranularity' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-static-method-addGranularity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-static-method-addGranularity' class='name expandable'>addGranularity</a>( <span class='pre'>granularitySpec</span> )<strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularitySpec</span> : Object<div class='sub-desc'><p>see ChartTime.granularitySpecs for existing granularitySpecs</p>\n\n<p>addGranularity allows you to add your own hierarchical granularities to ChartTime. Once you add a granularity to ChartTime\nyou can then instantiate ChartTime objects in your newly specified granularity. You specify new granularities with\ngranularitySpec object like this:</p>\n\n<pre><code>granularitySpec = {\n  release: {\n    segments: ['release'],\n    mask: 'R##',\n    lowest: 1,\n    dayPastEnd: new ChartTime('2011-07-01')\n    pastHighest: (ct) -&gt;\n      return ChartTime.granularitySpecs.iteration.timeBoxes.length + 1  # Yes, it's correct to use the length of iteration.timeBoxes\n    rataDieNumber: (ct) -&gt;\n      return ChartTime.granularitySpecs.iteration.timeBoxes[ct.release-1][1-1].start.rataDieNumber()\n  },\n  iteration: {\n    segments: ['release', 'iteration'],\n    mask: 'R##I##',\n    lowest: 1,\n    dayPastEnd: new ChartTime('2011-07-01')        \n    timeBoxes: [\n      [\n        {start: new ChartTime('2011-01-01'), label: 'R1 Iteration 1'},\n        {start: new ChartTime('2011-02-01'), label: 'R1 Iteration 2'},\n        {start: new ChartTime('2011-03-01'), label: 'R1 Iteration 3'},\n      ],\n      [\n        {start: new ChartTime('2011-04-01'), label: 'R2 Iteration 1'},\n        {start: new ChartTime('2011-05-01'), label: 'R2 Iteration 2'},\n        {start: new ChartTime('2011-06-01'), label: 'R2 Iteration 3'},\n      ]\n    ]\n    pastHighest: (ct) -&gt;\n      temp = ChartTime.granularitySpecs.iteration.timeBoxes[ct.release-1]?.length + 1\n      if temp? and not isNaN(temp) and ct.beforePastFlag != 'PAST_LAST'\n        return temp\n      else\n        numberOfReleases = ChartTime.granularitySpecs.iteration.timeBoxes.length\n        return ChartTime.granularitySpecs.iteration.timeBoxes[numberOfReleases-1].length + 1\n\n    rataDieNumber: (ct) -&gt;\n      return ChartTime.granularitySpecs.iteration.timeBoxes[ct.release-1][ct.iteration-1].start.rataDieNumber()\n  },\n  iteration_day: {  # By convention, it knows to use day functions on it. This is the lowest allowed custom granularity\n    segments: ['release', 'iteration', 'iteration_day'],\n    mask: 'R##I##-##',\n    lowest: 1,\n    dayPastEnd: new ChartTime('2011-07-01'),\n    pastHighest: (ct) -&gt;\n      iterationTimeBox = ChartTime.granularitySpecs.iteration.timeBoxes[ct.release-1]?[ct.iteration-1]\n      if !iterationTimeBox? or ct.beforePastFlag == 'PAST_LAST'\n        numberOfReleases = ChartTime.granularitySpecs.iteration.timeBoxes.length\n        numberOfIterationsInLastRelease = ChartTime.granularitySpecs.iteration.timeBoxes[numberOfReleases-1].length\n        iterationTimeBox = ChartTime.granularitySpecs.iteration.timeBoxes[numberOfReleases-1][numberOfIterationsInLastRelease-1]\n\n      thisIteration = iterationTimeBox.start.inGranularity('iteration')\n      nextIteration = thisIteration.add(1)\n      if nextIteration.beforePastFlag == 'PAST_LAST'\n        return ChartTime.granularitySpecs.iteration_day.dayPastEnd.rataDieNumber() - iterationTimeBox.start.rataDieNumber() + 1\n      else\n        return nextIteration.rataDieNumber() - iterationTimeBox.start.rataDieNumber() + 1 \n\n    rataDieNumber: (ct) -&gt;\n      return ChartTime.granularitySpecs.iteration.timeBoxes[ct.release-1][ct.iteration-1].start.rataDieNumber() + ct.iteration_day - 1\n  }\n}    \nChartTime.addGranularity(granularitySpec)\n</code></pre>\n\n<p>The <code>mask</code> must cover all of the segments to get down to the granularity being specified. The digits of the granularity segments\nare represented with <code>#</code>. Any other characters can be used as a delimeter, but it should always be one character to comply with\nthe expectations of the Lumenize hierarchy visualizations. All of the standard granularities start with a 4-digit year to\ndistinguish your custom granularity, your highest level must start with some number of digits other than 4 or a prefix letter\n(<code>R</code> in the example above).</p>\n\n<p>In order for the ChartTimeIterator to work, you must provide <code>pastHighest</code> and <code>rataDieNumber</code> callback functions. You should\nbe able to mimic (or use as-is) the example above for most use cases. Notice how the <code>rataDieNumber</code> function simply leverages\n<code>rataDieNumber</code> functions for the standard granularities.</p>\n\n<p>In order to convert into this granularity from some other granularity, you must provide an <code>inGranularity</code> callback [NOT YET IMPLEMENTED].\nBut ChartTime will convert to any of the standard granularities from even custom granularities as long as a <code>rataDieNumber()</code> function\nis provided.</p>\n\n<p><strong>The <code>timeBoxes</code> propoerty in the <code>granularitySpec</code> Object above has no special meaning</strong> to ChartTime or ChartTimeIterator. It's simply used\nby the <code>pastHighest</code> and <code>rataDieNumber</code> functions. The boundaries could come from where ever you want and even have been encoded as\nliterals in the <code>pastHighest</code> and <code>rataDieNumber</code> callback functions.</p>\n\n<p>The convention of naming the lowest order granularity with <code>_day</code> at the end IS signficant. ChartTime knows to treat that as a day-level\ngranularity. If there is a use-case for it, ChartTime could be upgraded to allow you to drill down into hours, minutes, etc. from any\n<code>_day</code> granularity but right now those lower order time granularities are only supported for the canonical ISO-6801 form.</p>\n</div></li></ul></div></div></div><div id='static-method-getZuluString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Lumenize.ChartTime'>Lumenize.ChartTime</span><br/><a href='source/ChartTime.coffee.html#Lumenize-ChartTime-static-method-getZuluString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Lumenize.ChartTime-static-method-getZuluString' class='name expandable'>getZuluString</a>( <span class='pre'>jsDate</span> ) : String<strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jsDate</span> : Date<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Given a JavaScript Date() Object, this will return the canonical ISO-8601 form.</p>\n\n<p>If you don't provide any parameters, it will return now, like <code>new Date()</code> except this is a zulu string.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});